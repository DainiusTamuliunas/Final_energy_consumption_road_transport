{"cells":[{"cell_type":"code","source":["# Choose file path for the data\n","file_path = '/content/drive/MyDrive/Master Paper/Data/'\n","\n","# Load the CSV file\n","eu_vans = pd.read_csv(file_path + 'ea_europa_real_world_data_cars_vans/' + 'cleaned_2022_Vans_Raw.csv')\n","\n","# Clean the 'marke' and 'modelis' columns (convert to lowercase and remove leading/trailing spaces)\n","eu_vans['marke'] = eu_vans['marke'].str.lower().str.strip()\n","eu_vans['modelis'] = eu_vans['modelis'].str.lower().str.strip()\n","\n","# Read the CSV files into dataframes\n","eu_vans_unique = pd.read_csv(file_path + 'ea_vans_unique_fixed.csv')\n"],"metadata":{"id":"RFurBWFg9Xis"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load the CSV file\n","eu_cars = pd.read_csv(file_path + 'ea_europa_real_world_data_cars_vans/' + 'cleaned_2022_Cars_Raw.csv')\n","\n","# Clean the 'marke' and 'modelis' columns (convert to lowercase and remove leading/trailing spaces)\n","eu_cars['marke'] = eu_cars['marke'].str.lower().str.strip()\n","eu_cars['modelis'] = eu_cars['modelis'].str.lower().str.strip()\n","\n","# Read the CSV files into dataframes\n","eu_cars_unique = pd.read_csv(file_path + 'ea_cars_unique_fixed.csv')\n"],"metadata":{"id":"7_IGrJbz-KRi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","def merge_and_clean_columns(df, unique_df):\n","    \"\"\"\n","    Merges the main dataframe with the unique combinations dataframe on 'marke' and 'modelis',\n","    cleans up unnecessary _x and _y suffixes, and returns the cleaned merged dataframe.\n","\n","    :param df: The main dataframe.\n","    :param unique_df: The dataframe with unique 'marke' and 'modelis' combinations and cleaned columns.\n","    :return: The merged and cleaned dataframe.\n","    \"\"\"\n","    # Merge df with unique_df on 'marke' and 'modelis'\n","    df_merged = df.merge(unique_df,\n","                         on=['marke', 'modelis'],\n","                         how='left')  # Use left join to retain all rows from df\n","\n","    # Remove the _x columns\n","    df_merged = df_merged.drop(columns=['cleaned_marke_x', 'cleaned_modelis_x'])\n","\n","    # Rename the _y columns to remove the _y suffix\n","    df_merged = df_merged.rename(columns={\n","        'cleaned_marke_y': 'cleaned_marke',\n","        'cleaned_modelis_y': 'cleaned_modelis'\n","    })\n","\n","    # Return the cleaned dataframe\n","    return df_merged\n","\n","eu_cars_clean = merge_and_clean_columns(eu_cars, eu_cars_unique)\n","eu_vans_clean = merge_and_clean_columns(eu_vans, eu_vans_unique)\n","\n","# Create additional dummy column to know what data is there\n"],"metadata":{"id":"dd1nY0T4hKjr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create new columns to indicate if the row belongs to cars or vans\n","eu_cars_clean['eu_cars'] = 1  # 1 indicates it's a car\n","eu_cars_clean['eu_vans'] = 0  # 0 indicates it's not a van\n","\n","eu_vans_clean['eu_cars'] = 0  # 0 indicates it's not a car\n","eu_vans_clean['eu_vans'] = 1  # 1 indicates it's a van\n","\n","# Combine the two dataframes into one, ensuring both columns exist\n","eu_total_final = pd.concat([eu_cars_clean, eu_vans_clean], ignore_index=True)\n","\n","# Save the combined dataframe to a CSV file\n","eu_total_final.to_csv(file_path + 'eu_total_final.csv', index=False)\n"],"metadata":{"id":"p37PZZB6hKl8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","file_path = '/content/drive/MyDrive/Master Paper/Data/'\n","eu_total_final = pd.read_csv(file_path + 'eu_total_final.csv')\n"],"metadata":{"id":"h_SSwcBe4ha5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# EU Total Analysis after ChatGPT"],"metadata":{"id":"TATf1Dw_w2eG"}},{"cell_type":"code","source":["!pip install unidecode \\\n","fuzzywuzzy \\\n","python-Levenshtein"],"metadata":{"id":"2-RX6pJllhGd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import re\n","import unidecode\n","from fuzzywuzzy import process\n","\n","# Lists of most known vehicle brands\n","known_car_brands = {'AC', 'AMC', 'Abarth', 'Acura', 'Alfa Romeo', 'Alpine', 'Aston Martin', 'Audi', 'Avanti', 'BMW', 'BYD', 'Bentley', 'Bugatti',\n","'Buick', 'Cadillac', 'Caterham', 'Changan', 'Chevrolet', 'Chrysler', 'Citroen', 'Cupra', 'DS', 'Dacia', 'Daewoo', 'Daihatsu',\n","'Datsun', 'DeLorean', 'Dodge', 'Eagle', 'FAW', 'Ferrari', 'Fiat', 'Fisker', 'Ford', 'Freightliner', 'GMC', 'Geely',\n","'Genesis', 'Geo', 'Great Wall', 'HUMMER', 'Honda', 'Hummer', 'Hyundai', 'Infiniti', 'Isuzu', 'Iveco', 'Jaguar', 'Jeep', 'Kia',\n","'Koenigsegg', 'Lada', 'Lamborghini', 'Lancia', 'Land Rover', 'Lexus', 'Lincoln', 'Lotus', 'MAN', 'MG', 'MINI', 'Mahindra',\n","'Maruti Suzuki', 'Maserati', 'Maxus', 'Maybach', 'Mazda', 'McLaren', 'Mercedes AMG', 'Mercedes-Benz', 'Mercury', 'Merkur',\n","'Mitsubishi', 'Morgan', 'Nissan', 'Oldsmobile', 'Opel', 'Pagani', 'Peel', 'Perodua', 'Peugeot', 'Pininfarina', 'Plymouth',\n","'Polestar', 'Pontiac', 'Porsche', 'Proton', 'RAM', 'Renault', 'Rimac', 'Rolls-Royce', 'Rover', 'SRT', 'Saab', 'Saturn', 'Scania',\n","'Scion', 'Seat', 'Skoda', 'SsangYong', 'Sterling', 'Subaru', 'Suzuki', 'TVR', 'Tata', 'Tesla', 'Toyota', 'Triumph', 'UAZ',\n","'Volkswagen', 'Volvo', 'Yugo', 'Zenvo', 'Zotye', 'smart'}\n","\n","known_motorcycle_brands = {\n","    'AJP', 'Adiva', 'Aeon', 'Aprilia', 'Aspess Power', 'Axy', 'Azel', 'BMW', 'Bajaj', 'Benelli', 'Beta', 'Bimota',\n","    'Borile', 'Boss Hoss', 'Buell', 'Bultaco', 'CCM', 'CF Moto', 'CH Racing', 'CMC', 'CPI', 'CR&S', 'Cagiva',\n","    'Dado Motors', 'Daelim', 'Derbi', 'Ducati', 'E-Tropolis', 'E-max', 'Ecomission', 'Fantic Motor', 'Garelli',\n","    'Gas Gas', 'Generic', 'Ghezzi-Brian', 'GiMotori', 'GiPuma', 'Gilera', 'Green Mobility Italia', 'HDM', 'HM',\n","    'HP Power', 'Harley-Davidson', 'Headbanger', 'Honda', \"Honda Dall'Ara\", 'Hupper', 'Husaberg', 'Husqvarna',\n","    'Hyosung', 'Indian', 'Italjet', 'Jawa', 'KRC', 'KTM', 'Kawasaki', 'Kawasaki KL', 'Keeway', 'Kreidler', 'Kymco',\n","    'LML', 'Lambretta', 'Laverda', 'Leonart', 'Lingben', 'Linhai', 'MBK', 'MV Agusta', 'MZ', 'Magni', 'Maico',\n","    'Malaguti', 'Mash', 'Millepercento', 'Mondial', 'Montesa', 'Moto Bellini', 'Moto Guzzi', 'Moto Morini',\n","    'Moto Rumi', 'MotoBi', 'Motom', 'Motor Union', 'Nipponia', 'Norton', 'Nox', 'Ossa', 'Over', 'PGO', 'Paton',\n","    'Peda Motor', 'Peugeot', 'Piaggio', 'Polini', 'Quadro', 'Quantya', 'RedMoto Honda', 'Renault', 'Rieju',\n","    'Royal Enfield', 'SWM', 'Sachs', 'Scorpa', 'Sherco', 'Siamoto', 'Steed', 'Suzuki', 'Suzuki Valenti', 'Sym',\n","    'TGB', 'TM Racing', 'Terra Modena', 'Triumph', 'Ural', 'Vectrix', 'Vertemati', 'Victory', 'Vor', 'WT Motors',\n","    'Yamaha'\n","}\n","\n","\n","known_bus_brands = {\n","    'MAN', 'Mercedes Benz', 'Iveco', 'Scania', 'Volvo', 'Setra', 'Van Hool', 'Neoplan', 'Solaris', 'Mercedes-Benz',\n","    'Alexander Dennis', 'BYD', 'Blue Bird', 'New Flyer', 'Gillig', 'Temsa', 'Otokar', 'King Long', 'Yutong',\n","    'MCI', 'Isuzu', 'Tata', 'Ashok Leyland', 'Marcopolo', 'Higer', 'Golden Dragon', 'VDL', 'Leyland'\n","}\n","\n","\n","known_moped_brands = {\n","    'Piaggio', 'Vespa', 'Kymco', 'SYM', 'Peugeot', 'Yamaha', 'Honda', 'Derbi', 'Aprilia', 'Rieju',\n","    'Tomos', 'Puch', 'Gilera', 'Beta', 'Znen', 'TGB', 'Malaguti', 'Baotian', 'Zhongneng', 'Keeway', 'Benelli',\n","    'Adly', 'CPI', 'Generic', 'Lambretta', 'Motobecane', 'Sachs', 'Mash'\n","}\n","\n","\n","known_special_vehicle_brands = {\n","    'Mercedes Benz', 'MAN', 'Scania', 'Volvo', 'Ford', 'Iveco', 'Renault', 'DAF', 'Unimog', 'Tatra', 'Magirus',\n","    'Terberg', 'BMC', 'Rosenbauer', 'SISU', 'Oshkosh', 'Bremach', 'Kamaz', 'BelAZ', 'MTU', 'HÃ¤gglunds',\n","    'Foton', 'Dongfeng', 'Sinotruk', 'FAW', 'Mack Defense'\n","}\n","\n","all_known_brands = known_car_brands.union(known_motorcycle_brands, known_bus_brands, known_truck_brands, known_moped_brands, known_special_vehicle_brands)\n"],"metadata":{"id":"xGbzr--2llGr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import re\n","import unidecode\n","import pandas as pd\n","from fuzzywuzzy import process\n","from fuzzywuzzy import fuzz\n","\n","# Function to clean the brand name by normalizing and removing extra information\n","def clean_brand_name(name):\n","    \"\"\"Clean brand name by normalizing and removing extra information.\"\"\"\n","    if not isinstance(name, str):\n","        return name\n","    # Normalize characters\n","    name = unidecode.unidecode(name)\n","    # Remove any extra info after certain characters like slashes or second space if exists\n","    name = re.split(r'[/\\\\:]', name)[0].strip()\n","    if name.count(' ') >= 2:\n","        name = ' '.join(name.split()[:2])  # Keep only first two words if more than two spaces\n","    return name\n","\n","# Merge all known brands into one set\n","all_known_brands = known_car_brands.union(known_motorcycle_brands, known_bus_brands, known_truck_brands, known_moped_brands, known_special_vehicle_brands)\n","\n","# Function to apply fuzzy matching with stricter rules for long names also explain why this fuzzy method is used with scorer fuzz.token_set_ratio\n","def match_brand_name(name, known_brands, short_threshold=80, long_threshold=85, min_length=6):\n","    \"\"\"Matches the brand name using fuzzy matching and flags ambiguous entries, using token_set_ratio for better matches.\"\"\"\n","    if not isinstance(name, str) or len(name.strip()) == 0:\n","        return None, True, 0  # Return None and flag for manual review if empty or invalid\n","\n","    # Perform token_set_ratio fuzzy matching for better word-level similarity\n","    match, score = process.extractOne(name, known_brands, scorer=fuzz.token_set_ratio)\n","\n","    # Stricter matching for longer names\n","    if len(name) >= min_length:\n","        if score >= long_threshold:\n","            return match, False, score  # High-confidence match, no manual review\n","        else:\n","            return name, True, score  # Flag for manual review\n","    else:\n","        if score >= short_threshold:\n","            return match, False, score  # High-confidence match, no manual review\n","        else:\n","            return name, True, score  # Flag for manual review\n","\n","\n","\n"],"metadata":{"id":"DwSd39kXluV9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Clean the 'cleaned_marke' column\n","eu_total_final['cleaned_marke'] = eu_total_final['cleaned_marke'].apply(clean_brand_name)\n","\n","# Extract unique cleaned brands\n","unique_cleaned_marke = eu_total_final['cleaned_marke'].unique()\n","\n","# Create a DataFrame from unique cleaned brands\n","unique_brands_df = pd.DataFrame(unique_cleaned_marke, columns=['cleaned_marke'])\n","\n","# Apply fuzzy matching\n","unique_brands_df['matched_brand'], unique_brands_df['manual_flag'], unique_brands_df['score'] = zip(\n","    *unique_brands_df['cleaned_marke'].apply(lambda x: match_brand_name(x, all_known_brands))\n",")\n","\n","# Map the matched brands back to the main dataset\n","eu_total_final = eu_total_final.merge(unique_brands_df[['cleaned_marke', 'matched_brand']], on='cleaned_marke', how='left')\n","\n","# Display flagged entries for manual inspection\n","flagged_entries = unique_brands_df[unique_brands_df['manual_flag']]\n","\n","# Update 'cleaned_marke' with 'matched_brand_x' values if 'matched_brand_x' is not null\n","eu_total_final['cleaned_marke'] = eu_total_final['matched_brand'].combine_first(eu_total_final['cleaned_marke'])\n","\n","# Delete unussable column:\n","eu_total_final.drop(columns=['matched_brand'], inplace=True)\n"],"metadata":{"id":"gvZn1Io7mD9F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Save the result to a file\n","file_path = 'C:/Users/ACER/Desktop/Master Thesis/Data/'\n","eu_vans.to_csv(file_path + 'ea_europa_real_world_data_cars_vans/' + 'cleaned_2022_Vans_Raw.csv', index=False)"],"metadata":{"id":"m4WhzyiSjSih"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1CvuL8SGVlsM215UvEOPkMALSm8-M0xCD","authorship_tag":"ABX9TyME1xxLzRtSS8hI4D06qf9D"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}